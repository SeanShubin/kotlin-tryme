package com.seanshubin.kotlin.tryme.domain.jvmclassformat

enum class Code(val opcode: UByte, val codeArgs: CodeArgs) {
    aaload(0x32u, CodeArgs.NONE),
    aastore(0x53u, CodeArgs.NONE),
    aconst_null(0x01u, CodeArgs.NONE),
    aload(0x19u, CodeArgs.LOCAL_VARIABLE_INDEX),
    aload_0(0x2au, CodeArgs.NONE),
    aload_1(0x2bu, CodeArgs.NONE),
    aload_2(0x2cu, CodeArgs.NONE),
    aload_3(0x2du, CodeArgs.NONE),
    anewarray(0xbdu, CodeArgs.CONSTANT_POOL_INDEX),
    areturn(0xb0u, CodeArgs.NONE),
    arraylength(0xbeu, CodeArgs.NONE),
    astore(0x3au, CodeArgs.LOCAL_VARIABLE_INDEX),
    astore_0(0x4bu, CodeArgs.NONE),
    astore_1(0x4cu, CodeArgs.NONE),
    astore_2(0x4du, CodeArgs.NONE),
    astore_3(0x4eu, CodeArgs.NONE),
    athrow(0xbfu, CodeArgs.NONE),
    baload(0x33u, CodeArgs.NONE),
    bastore(0x54u, CodeArgs.NONE),
    bipush(0x10u, CodeArgs.BYTE_VALUE),
    caload(0x34u, CodeArgs.NONE),
    castore(0x55u, CodeArgs.NONE),
    checkcast(0xc0u, CodeArgs.CONSTANT_POOL_INDEX),
    d2f(0x90u, CodeArgs.NONE),
    d2i(0x8eu, CodeArgs.NONE),
    d2l(0x8fu, CodeArgs.NONE),
    dadd(0x63u, CodeArgs.NONE),
    daload(0x31u, CodeArgs.NONE),
    dastore(0x52u, CodeArgs.NONE),
    dcmpg(0x98u, CodeArgs.NONE),
    dcmpl(0x97u, CodeArgs.NONE),
    dconst_0(0x0eu, CodeArgs.NONE),
    dconst_1(0x0fu, CodeArgs.NONE),
    ddiv(0x6fu, CodeArgs.NONE),
    dload(0x18u, CodeArgs.LOCAL_VARIABLE_INDEX),
    dload_0(0x26u, CodeArgs.NONE),
    dload_1(0x27u, CodeArgs.NONE),
    dload_2(0x28u, CodeArgs.NONE),
    dload_3(0x29u, CodeArgs.NONE),
    dmul(0x6bu, CodeArgs.NONE),
    dneg(0x77u, CodeArgs.NONE),
    drem(0x73u, CodeArgs.NONE),
    dreturn(0xafu, CodeArgs.NONE),
    dstore(0x39u, CodeArgs.LOCAL_VARIABLE_INDEX),
    dstore_0(0x47u, CodeArgs.NONE),
    dstore_1(0x48u, CodeArgs.NONE),
    dstore_2(0x49u, CodeArgs.NONE),
    dstore_3(0x4au, CodeArgs.NONE),
    dsub(0x67u, CodeArgs.NONE),
    dup(0x59u, CodeArgs.NONE),
    dup_x1(0x5au, CodeArgs.NONE),
    dup_x2(0x5bu, CodeArgs.NONE),
    dup2(0x5cu, CodeArgs.NONE),
    dup2_x1(0x5du, CodeArgs.NONE),
    dup2_x2(0x5eu, CodeArgs.NONE),
    f2d(0x8du, CodeArgs.NONE),
    f2i(0x8bu, CodeArgs.NONE),
    f2l(0x8cu, CodeArgs.NONE),
    fadd(0x62u, CodeArgs.NONE),
    faload(0x30u, CodeArgs.NONE),
    fastore(0x51u, CodeArgs.NONE),
    fcmpg(0x96u, CodeArgs.NONE),
    fcmpl(0x95u, CodeArgs.NONE),
    fconst_0(0x0bu, CodeArgs.NONE),
    fconst_1(0x0cu, CodeArgs.NONE),
    fconst_2(0x0du, CodeArgs.NONE),
    fdiv(0x6eu, CodeArgs.NONE),
    fload(0x17u, CodeArgs.LOCAL_VARIABLE_INDEX),
    fload_0(0x22u, CodeArgs.NONE),
    fload_1(0x23u, CodeArgs.NONE),
    fload_2(0x24u, CodeArgs.NONE),
    fload_3(0x25u, CodeArgs.NONE),
    fmul(0x6au, CodeArgs.NONE),
    fneg(0x76u, CodeArgs.NONE),
    frem(0x72u, CodeArgs.NONE),
    freturn(0xaeu, CodeArgs.NONE),
    fstore(0x38u, CodeArgs.LOCAL_VARIABLE_INDEX),
    fstore_0(0x43u, CodeArgs.NONE),
    fstore_1(0x44u, CodeArgs.NONE),
    fstore_2(0x45u, CodeArgs.NONE),
    fstore_3(0x46u, CodeArgs.NONE),
    fsub(0x66u, CodeArgs.NONE),
    getfield(0xb4u, CodeArgs.CONSTANT_POOL_INDEX),
    getstatic(0xb2u, CodeArgs.CONSTANT_POOL_INDEX),
    goto(0xa7u, CodeArgs.BRANCH_OFFSET),
    goto_w(0xc8u, CodeArgs.BRANCH_OFFSET_WIDE),
    i2b(0x91u, CodeArgs.NONE),
    i2c(0x92u, CodeArgs.NONE),
    i2d(0x87u, CodeArgs.NONE),
    i2f(0x86u, CodeArgs.NONE),
    i2l(0x85u, CodeArgs.NONE),
    i2s(0x93u, CodeArgs.NONE),
    iadd(0x60u, CodeArgs.NONE),
    iaload(0x2eu, CodeArgs.NONE),
    iand(0x7eu, CodeArgs.NONE),
    iastore(0x4fu, CodeArgs.NONE),
    iconst_m1(0x02u, CodeArgs.NONE),
    iconst_0(0x03u, CodeArgs.NONE),
    iconst_1(0x04u, CodeArgs.NONE),
    iconst_2(0x05u, CodeArgs.NONE),
    iconst_3(0x06u, CodeArgs.NONE),
    iconst_4(0x07u, CodeArgs.NONE),
    iconst_5(0x08u, CodeArgs.NONE),
    idiv(0x6cu, CodeArgs.NONE),
    if_acmpeq(0xa5u, CodeArgs.TWO_REFERENCES),
    if_acmpne(0xa6u, CodeArgs.TWO_REFERENCES),
    if_icmpeq(0x9fu, CodeArgs.BRANCH_OFFSET),
    if_icmpne(0xa0u, CodeArgs.BRANCH_OFFSET),
    if_icmplt(0xa1u, CodeArgs.BRANCH_OFFSET),
    if_icmpge(0xa2u, CodeArgs.BRANCH_OFFSET),
    if_icmpgt(0xa3u, CodeArgs.BRANCH_OFFSET),
    if_icmple(0xa4u, CodeArgs.BRANCH_OFFSET),
    ifeq(0x99u, CodeArgs.BRANCH_OFFSET),
    ifne(0x9au, CodeArgs.BRANCH_OFFSET),
    iflt(0x9bu, CodeArgs.BRANCH_OFFSET),
    ifge(0x9cu, CodeArgs.BRANCH_OFFSET),
    ifgt(0x9du, CodeArgs.BRANCH_OFFSET),
    ifle(0x9eu, CodeArgs.BRANCH_OFFSET),
    ifnonnull(0xc7u, CodeArgs.BRANCH_OFFSET),
    ifnull(0xc6u, CodeArgs.BRANCH_OFFSET),
    iinc(0x84u, CodeArgs.INDEX_CONST),
    iload(0x15u, CodeArgs.LOCAL_VARIABLE_INDEX),
    iload_0(0x1au, CodeArgs.NONE),
    iload_1(0x1bu, CodeArgs.NONE),
    iload_2(0x1cu, CodeArgs.NONE),
    iload_3(0x1du, CodeArgs.NONE),
    imul(0x68u, CodeArgs.NONE),
    ineg(0x74u, CodeArgs.NONE),
    instance_of(0xc1u, CodeArgs.CONSTANT_POOL_INDEX),
    invokedynamic(0xbau, CodeArgs.CONSTANT_POOL_INDEX_THEN_TWO_ZEROES),
    invokeinterface(0xb9u, CodeArgs.CONSTANT_POOL_INDEX_THEN_COUNT_THEN_ZERO),
    invokespecial(0xb7u, CodeArgs.CONSTANT_POOL_INDEX),
    invokestatic(0xb8u, CodeArgs.CONSTANT_POOL_INDEX),
    invokevirtual(0xb6u, CodeArgs.CONSTANT_POOL_INDEX),
    ior(0x80u, CodeArgs.NONE),
    irem(0x70u, CodeArgs.NONE),
    ireturn(0xacu, CodeArgs.NONE),
    ishl(0x78u, CodeArgs.NONE),
    ishr(0x7au, CodeArgs.NONE),
    istore(0x36u, CodeArgs.LOCAL_VARIABLE_INDEX),
    istore_0(0x3bu, CodeArgs.NONE),
    istore_1(0x3cu, CodeArgs.NONE),
    istore_2(0x3du, CodeArgs.NONE),
    istore_3(0x3eu, CodeArgs.NONE),
    isub(0x64u, CodeArgs.NONE),
    iushr(0x7cu, CodeArgs.NONE),
    ixor(0x82u, CodeArgs.NONE),
    jsr(0xa8u, CodeArgs.BRANCH_OFFSET),
    jsr_w(0xc9u, CodeArgs.BRANCH_OFFSET_WIDE),
    l2d(0x8au, CodeArgs.NONE),
    l2f(0x89u, CodeArgs.NONE),
    l2i(0x88u, CodeArgs.NONE),
    ladd(0x61u, CodeArgs.NONE),
    laload(0x2fu, CodeArgs.NONE),
    land(0x7fu, CodeArgs.NONE),
    lastore(0x50u, CodeArgs.NONE),
    lcmp(0x94u, CodeArgs.NONE),
    lconst_0(0x09u, CodeArgs.NONE),
    lconst_1(0x0au, CodeArgs.NONE),
    ldc(0x12u, CodeArgs.CONSTANT_POOL_INDEX_SHORT),
    ldc_w(0x13u, CodeArgs.CONSTANT_POOL_INDEX),
    ldc2_w(0x14u, CodeArgs.CONSTANT_POOL_INDEX),
    ldiv(0x6du, CodeArgs.NONE),
    lload(0x16u, CodeArgs.LOCAL_VARIABLE_INDEX),
    lload_0(0x1eu, CodeArgs.NONE),
    lload_1(0x1fu, CodeArgs.NONE),
    lload_2(0x20u, CodeArgs.NONE),
    lload_3(0x21u, CodeArgs.NONE),
    lmul(0x69u, CodeArgs.NONE),
    lneg(0x75u, CodeArgs.NONE),
    lookupswitch(0xabu, CodeArgs.LOOKUP_SWITCH),
    lor(0x81u, CodeArgs.NONE),
    lrem(0x71u, CodeArgs.NONE),
    lreturn(0xadu, CodeArgs.NONE),
    lshl(0x79u, CodeArgs.NONE),
    lshr(0x7bu, CodeArgs.NONE),
    lstore(0x37u, CodeArgs.LOCAL_VARIABLE_INDEX),
    lstore_0(0x3fu, CodeArgs.NONE),
    lstore_1(0x40u, CodeArgs.NONE),
    lstore_2(0x41u, CodeArgs.NONE),
    lstore_3(0x42u, CodeArgs.NONE),
    lsub(0x65u, CodeArgs.NONE),
    lushr(0x7du, CodeArgs.NONE),
    lxor(0x83u, CodeArgs.NONE),
    monitorenter(0xc2u, CodeArgs.NONE),
    monitorexit(0xc3u, CodeArgs.NONE),
    multianewarray(0xc5u, CodeArgs.CONSTANT_POOL_INDEX_THEN_DIMENSIONS),
    new(0xbbu, CodeArgs.CONSTANT_POOL_INDEX),
    newarray(0xbcu, CodeArgs.ARRAY_TYPE),
    nop(0x00u, CodeArgs.NONE),
    pop(0x57u, CodeArgs.NONE),
    pop2(0x58u, CodeArgs.NONE),
    putfield(0xb5u, CodeArgs.CONSTANT_POOL_INDEX),
    putstatic(0xb3u, CodeArgs.CONSTANT_POOL_INDEX),
    ret(0xa9u, CodeArgs.LOCAL_VARIABLE_INDEX),
    `return`(0xb1u, CodeArgs.NONE),
    saload(0x35u, CodeArgs.NONE),
    sastore(0x56u, CodeArgs.NONE),
    sipush(0x11u, CodeArgs.SHORT_VALUE),
    swap(0x5fu, CodeArgs.NONE),
    tableswitch(0xaau, CodeArgs.TABLE_SWITCH),
    wide(0xc4u, CodeArgs.WIDE);

    fun toObject(): Map<String, Any> {
        return mapOf(
            "name" to name,
            "opcode" to opcode.toString(16),
            "codeArgs" to codeArgs.name
        )
    }

    companion object {
        fun fromByte(byte: Byte): Code {
            return entries.firstOrNull { it.opcode == byte.toUByte() }
                ?: throw IllegalArgumentException(String.format("Unknown opcode: hex(%X) dec(%d)", byte, byte))
        }
    }
}